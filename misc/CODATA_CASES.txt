Theory of (Co)datatypes

    semantically, $k$ types are mutually (co)recursive if their dependency graph
    (x -> y if x is the type of an argument to one of y's constructors) is
    strongly connected

    (co)datatypes can be declared together as mutually (co)recursive even if
    they are not actually (co)recursive

    the semantic notion is more fruitful and the one we will focus on in the
    sequel

    Also, nothing forbids specifications with no (co)recursion, e.g.

      datatype enat = Nat(nat) | Infty
      codatatype complex = Complex(re: real, im: real)

    In this case, it makes no difference whether the type is introduced as a
    datatype or as a codatatype. Without loss of generality, we consider that
    these types are datatypes instead of codatatypes.


Degenerate Codatatypes

    Consider

      codatatype a = A(a)

    This is a finite codatatype, with a single value, which is infinite:
    $\mu a. A(a)$
    
    We need to detect those finite codatatypes. They are easy to
    characterize semantically.

    Lemma D.1. The only possible finite cardinality for the domain interpreting
    a (corecursive) codatatype is 1.

    Proof.
      Assume you have at least 2 different values of a codatatype.
      They differ at one point.
      * 
    Qed

    An immediate consequence by the distinctness axiom is that these types have
    necessarly one constructor, and that all arguments are of types of
    cardinality 1.

    Easy case: $k$ mutually recursive codatatypes, each equipped with one
    constructor, all of which take each other in arguments in various
    combinations, with potential other types that are known to have cardinality
    1. e.g.

      codatatype b = B b c b
             and c = C c b c

    Medium case: like above, but some of the arguments are other types not
    participating in the corecursion that are known to have cardinality 1, e.g.

      codatatype d = D unit d d unit

    where "unit" is a datatype with the single constructor "Unity : unit".

    Though case: like above, but with any other types where it's not clear
    whether it could have cardinality one or not.

      type e
      codatatype f = F e f f unit












    This type is problematic because:

      1. for unsat, need splitting---but splitting is a priori a datatype rule;
         adding it to codatatypes causes trouble.

      2. for sat, divergence.




    For cases i and ii, a decision can be made statically, and once we've
    identified that the codatatype has cardinality 1, we can activate the
    special inference rule that does E := E, X = Y.

    For case iii, if ground problem, we can safely assume it doesn't have
    cardinality one without loss of generality (because there's no way to
    express an upper bound on cardinality without variables, typically $X = c$
    or $X = Y$). Otherwise, we don't care too much about completeness, but
    we still want to avoid needless incompleteness; so we encode the
    constraint

      (ALL X X' : x_1. X = X') & ... & (ALL X X' : x_n. X = X') -->
      (ALL X X' : y. X = X')

    or rather its skolemized variant

      k1 ~= k1' | ... | kn ~= kn' | Y = Y'

    (for fresh k's) with a bias for the first cases.

    In general, the best we can do, because the "= 1, > 1" problem is
    undecidable. (Easy to see, because validity of a FOL formula $\varphi$ is undecidable, and we
    can encode a cardinality constraint such as $\varphi \longleftrightarrow (\forall x y. x \teq y)$.)

    More formally, we need a calculus to determine cardinality constraits (= 1,
    > 1, neither). Here's the calculus (TODO):

      x : T_other   problem is ground
      ------------------------------- GroundProb
      |x| > 1

      |Ctrs(x)| > 1
      --------------- ManyCtrs
      |x| > 1

      Ctrs(x) = {C}   C : \tau_1 ... \tau_n -> \delta   |\tau_i| > 1
      -------------------------------------------------------------- NonUnitArg
      |x| > 1


      x : DT   Ctrs(x) = {C}   C : \tau_1 ... \tau_n -> \delta   forall i: |\tau_i| = 1
      ---------------------------------------------------------------------------------- DTUnitArgs
      |x| = 1

      X @ {x1,...,xk} : mutually corecursive CDTs   forall i: Ctrs(x_i) = {C_i}   forall i: C_i : \tau_1 ... \tau_n -> \delta   forall i: \tau_i \in X \mathrl\lor |\tau_i| = 1
      ---------------------------------------------------------------------------------- CoDTUnitArgs
      |x_i| = 1


    Soundness theorem goes here.

    Theorem (Completeness). If problem ground, then assign a = 1 or > 1 constraint
    to all pathological types.

    Proof.
    Generalize to all types. Induction on the rules.
    Qed.



    GroundProb could be strengthened e.g. by inferring monotonicity of x.


    If |x| = 1 for codatatype, enable the "singleton" rule. If neither |x| = 1
    nor |x| > 1 is derivable for codatatype, generate the extra constraint as an
    additional axiom.







Implementation

  * specs preprocessed to avoid spurious mutual dependencies and
    noncorecursive codatatypes (in keeping with this paper)

  * card constraint calculus easily implemented as a recursive function that
    returns "= 1", "> 1", or donno.
